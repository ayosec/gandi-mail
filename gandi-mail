#!/bin/bash

set -euo pipefail

: "${GANDI_ORIGIN:=https://api.gandi.net}"

ARGV=("$@")

CURL_OUTPUT=$(mktemp)

# shellcheck disable=SC2064
trap "rm '$CURL_OUTPUT'" EXIT

usage() {
  cat 1>&2 <<-HELP
	Usage $0 [command]

	  COMMANDS:

	  domains                 Show domains owned by your user.
	  domain DOMAIN           Show information about a domain.

	  emails ls DOMAIN        Show emails in a specific domain.
	  emails add EMAIL        Add a new email to a domain.

	  alias ls EMAIL          Show aliases for an email address.
	  alias add EMAIL ALIAS   Add a new alias to the email address.
	  alias rm EMAIL ALIAS    Remove an alias.
	HELP
  exit 1
}

api_request() {
  if [ -z "${GANDI_KEY:-}" ]
  then
    local config_dir=${XDG_CONFIG_HOME:-$HOME/.config}/gandi-mail
    local key_file="$config_dir/api-key"

    if [ -f "$key_file.gpg" ]
    then
      GANDI_KEY=$(gpg -qd "$key_file.gpg")
    elif [ -f "$key_file" ]
    then
      GANDI_KEY=$(cat "$key_file")
    else
      echo "Missing key file." 1>&2
      usage
    fi
  fi

  local url="$GANDI_ORIGIN$1"
  shift

  declare -a body
  if [ ! -t 0 ]
  then
    body=(-H "Content-Type: application/json" --data-binary @-)
  fi

  curl --silent --fail --tlsv1.3          \
    -H "Authorization: Apikey $GANDI_KEY" \
    --output "$CURL_OUTPUT"               \
    "$url"                                \
    "$@"                                  \
    "${body[@]}" || (
      printf "Request to %s failed\n" "$url" 1>&2
      cat "$CURL_OUTPUT" 1>&2
      exit 1
    )

  cat "$CURL_OUTPUT"
}

cmd() {
  HANDLER=$1
  shift
  local argv=("${ARGV[@]}")

  while [ $# -gt 0 ]
  do
    if [ "$1" = "${argv[0]:-}" ]
    then
      shift
      argv=("${argv[@]:1}")
    else
      return 0
    fi
  done

  "$HANDLER" "${argv[@]}"
  exit
}

domains_list() {
  [ $# -eq 0 ] || usage

  (
    printf 'FQDN\tAUTORENEW\tCREATED AT\tREGISTRY ENDS AT\n'

    api_request "/v5/domain/domains" \
      | jq -r  '
          .[]
            | [
                .fqdn,
                .autorenew,
                (.dates.created_at | split("T") | .[0]),
                (.dates.registry_ends_at | split("T") | .[0])
              ]
            | join("\t")
        ' \
  ) | column -ts $'\t'
}

domains_show() {
  [ $# -eq 1 ] || usage
  api_request "/v5/domain/domains/$1" | jq .
}

emails_list() {
  [ $# -eq 1 ] || usage

  (
    printf 'ADDRESS\tTYPE\tQUOTA USED\tALIASES\tID\n'

    api_request "/v5/email/mailboxes/$1?per_page=100" \
      | jq -r  '
          .[]
            | [
                .address,
                .mailbox_type,
                .quota_used,
                .alias_count,
                .id
              ]
            | join("\t")
        ' \
  ) | column -ts $'\t'
}

emails_add() {
  [ $# -eq 1 ] || usage

  local password
  local new_email=$1
  local login=${new_email/@*}
  local domain=${new_email/*@}

  read -rsp "Password for $new_email:" password
  echo

  password=$(
    printf "%s" "$password" | mkpasswd --method=sha512crypt --stdin
  )

  jq \
      --arg login "$login" \
      -R <<<"$password"    \
      '{
        login: $login,
        mailbox_type: "standard",
        password: .
      }' \
    | api_request "/v5/email/mailboxes/$domain" \
    | jq .
}

alias_init_env() {
  local id
  local email=$1
  local login=${email/@*}
  local domain=${email/*@}

  id=$(
    api_request "/v5/email/mailboxes/$domain" \
      | jq --arg login "$login" -r \
        '.[]
            | select(.login == $login)
            | .id
        '
  )

  if [ -z "$id" ]
  then
    printf 'echo %q; exit 1' "Address $email not found."
    return
  fi

  printf 'local id=%q\n' "$id"
  printf 'local login=%q\n' "$login"
  printf 'local domain=%q\n' "$domain"
}

alias_list() {
  [ $# -eq 1 ] || usage
  eval "$(alias_init_env "$1")"

  api_request "/v5/email/mailboxes/$domain/$id" | jq -r '.aliases[]'
}

alias_add() {
  [ $# -eq 2 ] || usage

  local body
  local email=$1
  local new_alias=$2

  eval "$(alias_init_env "$email")"

  body=$(
    api_request "/v5/email/mailboxes/$domain/$id" \
      | jq --arg new_alias "$new_alias" '{ aliases: (.aliases + [$new_alias]) }')

  api_request "/v5/email/mailboxes/$domain/$id" -X PATCH <<<"$body" | jq .
}

alias_rm() {
  [ $# -eq 2 ] || usage

  local body
  local email=$1
  local old_alias=$2

  eval "$(alias_init_env "$email")"

  body=$(
    api_request "/v5/email/mailboxes/$domain/$id" \
      | jq --arg old_alias "$old_alias" '{ aliases: (.aliases - [$old_alias]) }')

  api_request "/v5/email/mailboxes/$domain/$id" -X PATCH <<<"$body" | jq .
}


cmd domains_list domains
cmd domains_show domain

cmd emails_list emails ls
cmd emails_add  emails add

cmd alias_list alias ls
cmd alias_add  alias add
cmd alias_rm   alias rm

usage
